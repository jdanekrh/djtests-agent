// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.redhat.mqe.djtests.cli";
option java_outer_classname = "CliProto";

package cli;

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

service Brk {
    rpc SigKill (google.protobuf.Empty) returns (google.protobuf.Empty) {
    };
    rpc SigTerm (google.protobuf.Empty) returns (google.protobuf.Empty) {
    };
    rpc Start (google.protobuf.Empty) returns (google.protobuf.Empty) {
    };

    // could return diff of the file
    rpc RestoreFile (RestoreRequest) returns (google.protobuf.Empty) {
    };
    rpc PatchFile (PatchRequest) returns (google.protobuf.Empty) {
    };
}

service Cli {
    rpc RunCli (CliRequest) returns (stream CliReply) {
    };
    rpc RunKillableCli (stream CliRequest) returns (stream CliReply) {
    };
    rpc WaitForConnection (CliID) returns (CliStatus) {
    };
    rpc Kill (CliKillRequest) returns (CliStatus) {
    };
}

service LogSnapper {
    rpc GetOffset (OffsetRequest) returns (OffsetReply) {
    };
    rpc GetSnap (SnapRequest) returns (SnapReply) {
    };
    rpc Search (SearchRequest) returns (SearchReply) {
    };
}

message CliRequest {
    string cli = 1;
    string type = 2;
    repeated string options = 3;
    WrapperOptions wrapperOptions = 4;
}

message WrapperOptions {
    google.protobuf.Int32Value c_killtime = 1;
    repeated TemporaryFile temp_file = 2;
}

message TemporaryFile {
    // use temporaryFile:// in CliRequest.options to reffer to it
    int32 id = 1;
    bytes content = 2;
}

message CliReply {
    int32 status = 1;
    repeated string lines = 2;
    CliID cli_id = 3;
    string stderr = 4;
}

message CliID {
    int32 pid = 1;
}

message CliStatus {
    bool running = 1;
    int32 connection_count = 2;
}

message CliKillRequest {
    int32 signal = 1;
    CliID cli_id = 2;
}

message OffsetRequest {
    string file = 1;
}

message OffsetReply {
    int64 offset = 1;
}

message SnapRequest {
    string file = 1;
    int64 begin = 2;
    // when end = 0, snap until the end of the file
    int64 end = 3;
}

message SearchRequest {
    SnapRequest snap = 1;
    repeated string strings = 2;
}

message SnapReply {
    string snap = 1;
}

message SearchReply {
    bool found = 1;
}

message PatchRequest {
    string path = 1;
    string json = 2;
}

message RestoreRequest {
    string path = 1;
}